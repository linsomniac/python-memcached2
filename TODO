Code that does a get/compute/lookup?
   data = cached(key, compute_function)
   def cached(key, compute_function, *args, **kwargs):
      data = self.get(key)
      if data:
         return data
      data = compute_function(*args, **kwargs)
      self.set(key, data)
      return data
Decide on what to do about automatic pickling.
Do we want to use flags for pickling/compression indication, or allow
      users to use it?  Or have a slightly higher level sits on top of
      Memcache() and can do pickling and compression?
Make "get" accept multiple keys (see "get <key>*" in protocol docs).
      How will that work, considering they could hash to multiple servers?
      Collect the ones that go to the same server and send them as groups?
Make it so that Value wrapper can merge get_multi results?
Make a old memcache compatible interface (to the extent possible)?
